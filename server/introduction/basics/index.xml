<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes (k8s) Basics on Amazon EKS Workshop</title>
    <link>/introduction/basics/</link>
    <description>Recent content in Kubernetes (k8s) Basics on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Oct 2018 10:14:32 -0700</lastBuildDate>
    
	<atom:link href="/introduction/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>What is Kubernetes?</title>
      <link>/introduction/basics/what_is_k8s/</link>
      <pubDate>Wed, 03 Oct 2018 10:14:46 -0700</pubDate>
      
      <guid>/introduction/basics/what_is_k8s/</guid>
      <description>Builds on over a decade of experience and best practices Utilizes declarative configuration and automation Draws upon a large ecosystem of tools, services, support  More information on what Kubernetes is all about can be found on the official Kubernetes website.</description>
    </item>
    
    <item>
      <title>Kubernetes Nodes</title>
      <link>/introduction/basics/concepts_nodes/</link>
      <pubDate>Wed, 03 Oct 2018 10:15:55 -0700</pubDate>
      
      <guid>/introduction/basics/concepts_nodes/</guid>
      <description>The machines that make up a Kubernetes cluster are called nodes.
Nodes in a Kubernetes cluster may be physical, or virtual.
There are two types of nodes:
 A Master-node type, which makes up the Control Plane, acts as the “brains” of the cluster.
 A Worker-node type, which makes up the Data Plane, runs the actual container images (via pods.)
  We’ll dive deeper into how nodes interact with each other later in the presentation.</description>
    </item>
    
    <item>
      <title>K8s Objects Overview</title>
      <link>/introduction/basics/concepts_objects/</link>
      <pubDate>Wed, 03 Oct 2018 10:15:55 -0700</pubDate>
      
      <guid>/introduction/basics/concepts_objects/</guid>
      <description>Kubernetes objects are entities that are used to represent the state of the cluster.
An object is a “record of intent” – once created, the cluster does its best to ensure it exists as defined. This is known as the cluster’s “desired state.”
Kubernetes is always working to make an object’s “current state” equal to the object’s “desired state.” A desired state can describe:
 What pods (containers) are running, and on which nodes IP endpoints that map to a logical group of containers How many replicas of a container are running And much more&amp;hellip;  Let’s explain these k8s objects in a bit more detail&amp;hellip;</description>
    </item>
    
    <item>
      <title>K8s Objects Detail (1/2)</title>
      <link>/introduction/basics/concepts_objects_details_1/</link>
      <pubDate>Wed, 03 Oct 2018 10:15:55 -0700</pubDate>
      
      <guid>/introduction/basics/concepts_objects_details_1/</guid>
      <description> Pod  A thin wrapper around one or more containers  DaemonSet  Implements a single instance of a pod on a worker node  Deployment  Details how to roll out (or roll back) across versions of your application  </description>
    </item>
    
    <item>
      <title>K8s Objects Detail (2/2)</title>
      <link>/introduction/basics/concepts_objects_details_2/</link>
      <pubDate>Wed, 03 Oct 2018 10:15:55 -0700</pubDate>
      
      <guid>/introduction/basics/concepts_objects_details_2/</guid>
      <description> ReplicaSet  Ensures a defined number of pods are always running  Job  Ensures a pod properly runs to completion  Service  Maps a fixed IP address to a logical group of pods  Label  Key/Value pairs used for association and filtering  </description>
    </item>
    
  </channel>
</rss>