<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CI/CD with CodePipeline on Amazon EKS Workshop</title>
    <link>/codepipeline/</link>
    <description>Recent content in CI/CD with CodePipeline on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/codepipeline/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create IAM Role</title>
      <link>/codepipeline/role/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/role/</guid>
      <description>In an AWS CodePipeline, we are going to use AWS CodeBuild to deploy a sample Kubernetes service. This requires an AWS Identity and Access Management (IAM) role capable of interacting with the EKS cluster.
In this step, we are going to create an IAM role and add an inline policy that we will use in the CodeBuild stage to interact with the EKS cluster via kubectl.
Create the role:
cd ~/environment ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) TRUST=&amp;quot;{ \&amp;quot;Version\&amp;quot;: \&amp;quot;2012-10-17\&amp;quot;, \&amp;quot;Statement\&amp;quot;: [ { \&amp;quot;Effect\&amp;quot;: \&amp;quot;Allow\&amp;quot;, \&amp;quot;Principal\&amp;quot;: { \&amp;quot;AWS\&amp;quot;: \&amp;quot;arn:aws:iam::$ACCOUNT_ID:root\&amp;quot; }, \&amp;quot;Action\&amp;quot;: \&amp;quot;sts:AssumeRole\&amp;quot; } ] }&amp;quot; echo &#39;{ &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;, &amp;quot;Statement&amp;quot;: [ { &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;, &amp;quot;Action&amp;quot;: &amp;quot;eks:Describe*&amp;quot;, &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot; } ] }&#39; &amp;gt; /tmp/iam-role-policy aws iam create-role --role-name EksWorkshopCodeBuilKubectldRole --assume-role-policy-document &amp;quot;$TRUST&amp;quot; --output text --query &#39;Role.</description>
    </item>
    
    <item>
      <title>Modify aws-auth ConfigMap</title>
      <link>/codepipeline/configmap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/configmap/</guid>
      <description>Now that we have the IAM role created, we are going to add the role to the aws-auth ConfigMap for the EKS cluster.
Once the ConfigMap includes this new role, kubectl in the CodeBuild stage of the pipeline will be able to interact with the EKS cluster via the IAM role.
ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text) ROLE=&amp;quot; - rolearn: arn:aws:iam::$ACCOUNT_ID:role/EksWorkshopCodeBuilKubectldRole\n username: build\n groups:\n - system:masters&amp;quot; kubectl get -n kube-system configmap/aws-auth -o yaml | awk &amp;quot;/mapRoles: \|/{print;print \&amp;quot;$ROLE\&amp;quot;;next}1&amp;quot; &amp;gt; /tmp/aws-auth-patch.</description>
    </item>
    
    <item>
      <title>Fork Sample Repository</title>
      <link>/codepipeline/forksample/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/forksample/</guid>
      <description>We are now going to fork the sample Kubernetes service so that we will be able modify the repository and trigger builds.
Login to GitHub and fork the sample service to your own account:
https://github.com/rnzsgh/eks-workshop-sample-api-service-go
Once the repo is forked, you can view it in your your GitHub repositories.
The forked repo will look like:</description>
    </item>
    
    <item>
      <title>GitHub Access Token</title>
      <link>/codepipeline/githubcredentials/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/githubcredentials/</guid>
      <description>In order for CodePipeline to receive callbacks from GitHub, we need to generate a personal access token.
Once created, an access token can be stored in a secure enclave and reused, so this step is only required during the first run or when you need to generate new keys.
Open up the New personal access page in GitHub.
You may be prompted to enter your GitHub password
 Enter a value for Token description, check the repo permission scope and scroll down and click the Generate token button</description>
    </item>
    
    <item>
      <title>CodePipeline Setup</title>
      <link>/codepipeline/codepipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/codepipeline/</guid>
      <description>Now we are going to create the AWS CodePipeline using AWS CloudFormation.
CloudFormation is an infrastructure as code (IaC) tool which provides a common language for you to describe and provision all the infrastructure resources in your cloud environment. CloudFormation allows you to use a simple text file to model and provision, in an automated and secure manner, all the resources needed for your applications across all regions and accounts.</description>
    </item>
    
    <item>
      <title>Trigger New Release</title>
      <link>/codepipeline/change/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/change/</guid>
      <description>So far we have walked through setting up CI/CD for EKS using AWS CodePipeline and now we are going to make a change to the GitHub repository so that we can see a new release built and delivered.
Open GitHub and select the forked repository with the name eks-workshop-sample-api-service-go.
Click on main.go file and then click on the edit button, which looks like a pencil.
Change the text where it says &amp;ldquo;Hello World&amp;rdquo;, add a commit message and then click the &amp;ldquo;Commit changes&amp;rdquo; button.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/codepipeline/cleanup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/codepipeline/cleanup/</guid>
      <description>Congratulations on making it through the CI/CD with CodePipline module.
This module is not used in subsequent steps, so you can remove the resources now, or at the end of the workshop.
First we need to delete the Kubernetes deployment and service:
kubectl delete deployments hello-k8s kubectl delete services hello-k8s  Next, we are going to delete the CloudFormation stack created. Open up CloudFormation the AWS Managemnt Console.
Check the box next to the eksws-codepipeline stack, select the Actions dropdown menu and then click Delete Stack:</description>
    </item>
    
  </channel>
</rss>